"""
Merge Monitor ‚Äî –≤—ã—è–≤–ª—è–µ—Ç —Å–ª—É—á–∞–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è UTXO (inputs) –¥–ª—è Bitcoin-–∞–¥—Ä–µ—Å–∞.
"""

import sys
import requests
from collections import defaultdict

def fetch_transactions(address):
    url = f"https://blockstream.info/api/address/{address}/txs"
    r = requests.get(url)
    r.raise_for_status()
    return r.json()

def analyze_merges(txs, address):
    merge_events = []
    for tx in txs:
        input_addresses = set()
        for vin in tx.get("vin", []):
            prevout = vin.get("prevout", {})
            addr = prevout.get("scriptpubkey_address")
            if addr:
                input_addresses.add(addr)
        if len(input_addresses) > 1 and address in input_addresses:
            merge_events.append({
                "txid": tx["txid"],
                "addresses": list(input_addresses),
                "count": len(input_addresses)
            })
    return merge_events

def main(address):
    print(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ {address} –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è UTXO...")
    try:
        txs = fetch_transactions(address)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
        return

    merges = analyze_merges(txs, address)

    if not merges:
        print("‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è UTXO –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –•–æ—Ä–æ—à–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å!")
    else:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(merges)} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π –≤—Ö–æ–¥–æ–≤ (UTXO):")
        for m in merges:
            print(f" - TXID: {m['txid']}, –≤—Ö–æ–¥–æ–≤: {m['count']} –∞–¥—Ä–µ—Å–æ–≤")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python merge_monitor.py <bitcoin_address>")
        sys.exit(1)
    main(sys.argv[1])
